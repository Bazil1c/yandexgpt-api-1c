
#Область ПрограммныйИнтерфейс

// В вызывающем коде перед записью данных необходимо проверить права
//	и установить привилегированный режим.
//	Сохраняет данные подключения к сервису.
//
// Параметры:
//  ПараметрыПодключения  - Структура - Сохраняемые данные. См. ПараметрыПодключения().
//
// Возвращаемое значение:
//   Булево   - Истина, в случае успешного сохранения настроке.
//
Функция СохранитьПараметрыПодключения(ПараметрыПодключения) Экспорт
	
	ИдентификаторПодсистемы = ИдентификаторПодсистемы();
	СобытиеЖурналаРегистрации = СобытиеЖурналаРегистрации();
	
	Возврат ЗаписатьДанныеВБезопасноеХранилище(ИдентификаторПодсистемы,
		ПараметрыПодключения, СобытиеЖурналаРегистрации);
	
КонецФункции
	
// Возвращает структуру с параметрами подключения.
// 
// Возвращаемое значение:
//   Структура   - Данные подключения.
//
Функция ПараметрыПодключения() Экспорт
	
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("ИдентификаторКаталога", "");
	ПараметрыПодключения.Вставить("OAuthТокен", "");
	ПараметрыПодключения.Вставить("IAMТокен", "");
	ПараметрыПодключения.Вставить("ВремяЖизниТокена", ТекущаяДатаСеанса());
	
	Возврат ПараметрыПодключения;

КонецФункции

// Возвращает данные подключения к сервису,
//	сохраненные в информационной базе.
//	Перед вызовом вызывающий код должен устанавливать привилегированный режим.
//
// Возвращаемое значение:
//	Структура - структура, содержащая данные подключения, см. ПараметрыПодключения().
//						Неопределено - при отсутствии сохраненных данных.
//
Функция ПрочитатьПараметрыПодключения() Экспорт

	УстановитьПривилегированныйРежим(Истина);

	ПараметрыПодключения = ПараметрыПодключения();
	
	ПрочитанныеПараметрыПодключения = ygpt_ИнтеграцияПовтИсп.ПрочитатьПараметрыПодключения();
	
	Если НЕ ПрочитанныеПараметрыПодключения = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыПодключения, ПрочитанныеПараметрыПодключения);
	КонецЕсли;
	
	Возврат ПараметрыПодключения;
	
КонецФункции

// Возвращает идентификатор подсистемы в справочнике объектов
// 	метаданных.
//
// Возвращаемое значение:
//	Строка - идентификатор подсистемы.
//
Функция ИдентификаторПодсистемы() Экспорт
	
	Возврат "YandexGPT";
	
КонецФункции

// Проверяет подключение к сервису.
//
// Параметры:
//  ПараметрыПодключения  - Структура - Содержит параметры подключения См. ПараметрыПодключения():
//
// Возвращаемое значение:
//   Булево   - Истина при успешном подключении, иначе Ложь.
//
Функция ПроверитьПодключение(ПараметрыПодключения) Экспорт
	
	ОбновитьТокен(ПараметрыПодключения);
	
	Возврат (ПараметрыПодключения.ВремяЖизниТокена > ТекущаяДатаСеанса());
	
КонецФункции

// Выполняет запрос.
//
// Параметры:
//  ОписаниеЗапросаКМодели	 - Структура - См. НовоеОписаниеЗапроса().
// 
// Возвращаемое значение:
//  Строка - Текст ответа модели.
//
Функция ВыполнитьЗапрос(ОписаниеЗапросаКМодели) Экспорт
	
	ПараметрыПодключения = ПрочитатьПараметрыПодключения();
	
	ПроверитьТокен(ПараметрыПодключения);
	
	ТелоЗапроса = НовоеТелоЗапроса(ПараметрыПодключения, ОписаниеЗапросаКМодели);
	
	ПараметрыЗапроса = КоннекторHTTP.НовыеПараметры();
	ПараметрыЗапроса.ПараметрыПреобразованияJSON.ПрочитатьВСоответствие = Ложь;
	
	ЗаполнитьЗаголовки(ПараметрыЗапроса.Заголовки, ПараметрыПодключения);
	
	URL = АдресСервиса();
	
	РезультатЗапроса = КоннекторHTTP.PostJson(URL, ТелоЗапроса, ПараметрыЗапроса);

	Результат = ygpt_ОбщегоНазначения.СвойствоСтруктурыРекурсивно(РезультатЗапроса, "result.alternatives", Новый Массив);
	
	Результат = ygpt_ОбщегоНазначения.СвойствоСтруктурыРекурсивно(Результат[0], "message.text", "");
		
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьТокен(ПараметрыПодключения)

	Если ПараметрыПодключения.ВремяЖизниТокена <= ТекущаяДатаСеанса() Тогда
		ОбновитьТокен(ПараметрыПодключения);	
	КонецЕсли;

КонецПроцедуры

// Меняет OAuth-токен на IAM-токен.
//
// Параметры:
//  ПараметрыПодключения  - Структура - Содержит параметры подключения См. ПараметрыПодключения():
//
Процедура ОбновитьТокен(ПараметрыПодключения = Неопределено)

	Если ПараметрыПодключения = Неопределено Тогда
		ПараметрыПодключения = ПрочитатьПараметрыПодключения();
	КонецЕсли;

	ТелоЗапроса = Новый Структура("yandexPassportOauthToken", ПараметрыПодключения.OAuthТокен);
	URL = АдресСервисаПолученияТокенов();
	Результат = КоннекторHTTP.PostJson(URL, ТелоЗапроса);
	
	IAMТокен = Результат.Получить("iamToken");
	
	Если ЗначениеЗаполнено(IAMТокен) Тогда
		ПараметрыПодключения.IAMТокен = IAMТокен;   
		ПараметрыПодключения.ВремяЖизниТокена = НовоеВремяЖизниТокена();
		СохранитьПараметрыПодключения(ПараметрыПодключения);
	КонецЕсли;
	
КонецПроцедуры

Функция АдресСервиса()

	Адрес = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion";
	
	Возврат Адрес;
	
КонецФункции

Функция АдресСервисаПолученияТокенов()

	Адрес = "https://iam.api.cloud.yandex.net/iam/v1/tokens";
	
	Возврат Адрес;
	
КонецФункции

Функция ВремяЖизниТокена()

	Возврат 12;

КонецФункции

Функция НовоеВремяЖизниТокена()
	
	ТекущаяДата = ТекущаяДатаСеанса();
	ВремяЖизниТокена = ВремяЖизниТокена();
	
	Возврат ygpt_ОбщегоНазначения.ДобавитьЧас(ТекущаяДата, ВремяЖизниТокена); 

КонецФункции

#Область ТелоЗапроса

Функция НовоеТелоЗапроса(ПараметрыПодключения, ОписаниеЗапроса)

	Тело = Новый Структура;
	
	URIМодели = URIМодели(ПараметрыПодключения, ОписаниеЗапроса);
	
	Тело.Вставить("modelUri", URIМодели);
	
	ЗаполнитьПараметрыКонфигурацииЗапроса(Тело, ОписаниеЗапроса);

	ЗаполнитьСообщенияЗапроса(Тело, ОписаниеЗапроса);
	
	Возврат Тело;
	
КонецФункции

Процедура ЗаполнитьПараметрыКонфигурацииЗапроса(Тело, ОписаниеЗапроса)
	
	ПараметрыКонфигурации = Новый Структура;
	
	ПараметрыКонфигурации.Вставить("temperature", ОписаниеЗапроса.ПараметрыКонфигурацииЗапроса.Температура);
	
	ПараметрыКонфигурации.Вставить("maxTokens",
		ОписаниеЗапроса.ПараметрыКонфигурацииЗапроса.МаксимальноеКоличествоТокенов);
		
	ПараметрыКонфигурации.Вставить("stream", ОписаниеЗапроса.ПараметрыКонфигурацииЗапроса.ПотоковаяПередача);

	Тело.Вставить("completionOptions", ПараметрыКонфигурации);

КонецПроцедуры

Процедура ЗаполнитьСообщенияЗапроса(Тело, ОписаниеЗапроса)

	Сообщения = Новый Массив;
	
	СообщениеКонтекста = НовоеСообщениеКонтекстаЗапроса(ОписаниеЗапроса); 
	Если НЕ СообщениеКонтекста = Неопределено Тогда
		Сообщения.Добавить(СообщениеКонтекста);
	КонецЕсли;	
	
	Сообщение = НовоеСообщениеЗапроса(ОписаниеЗапроса);
	Сообщения.Добавить(Сообщение);
	
	Тело.Вставить("messages", Сообщения);

КонецПроцедуры

Функция НовоеСообщениеЗапроса(ОписаниеЗапроса)

	Сообщение = Новый Структура;
	
	Сообщение.Вставить("role", "user");
	Сообщение.Вставить("text", ОписаниеЗапроса.ТекстЗапроса);
	
	Возврат Сообщение;
	
КонецФункции

Функция НовоеСообщениеКонтекстаЗапроса(ОписаниеЗапроса)
	
	Если НЕ ЗначениеЗаполнено(ОписаниеЗапроса.КонтекстЗапроса) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Сообщение = Новый Структура;
	
	Сообщение.Вставить("role", "system");
	Сообщение.Вставить("text", ОписаниеЗапроса.КонтекстЗапроса);
	
	Возврат Сообщение;
	
КонецФункции

Функция URIМодели(ПараметрыПодключения, ОписаниеЗапроса)

	СоответствиеURI = Новый Соответствие;
	СоответствиеURI.Вставить("YandexGPT", "gpt://%1/yandexgpt/latest");
	СоответствиеURI.Вставить(ygpt_Запросы.СтандартнаяМодель(), "gpt://%1/yandexgpt-lite/latest");
	СоответствиеURI.Вставить("Краткий пересказ", "gpt://%1/summarization/latest");
	
	ШаблонURI = СоответствиеURI.Получить(ОписаниеЗапроса.Модель);
	
	URI = СтрШаблон(ШаблонURI, ПараметрыПодключения.ИдентификаторКаталога);
	
	Возврат URI;
	
КонецФункции

#КонецОбласти

Процедура ЗаполнитьЗаголовки(Заголовки, ПараметрыПодключения)
	
	ЗаголовокАвторизации = СтрШаблон("Bearer %1", ПараметрыПодключения.IAMТокен);
	Заголовки.Вставить("Authorization", ЗаголовокАвторизации);

	Заголовки.Вставить("x-folder-id", ПараметрыПодключения.ИдентификаторКаталога);
	Заголовки.Вставить("Content-type", "application/json");

КонецПроцедуры

// Записывает конфиденциальные данные в безопасное хранилище. 
// См. ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище().
//
// Параметры:
//  ИдентификаторПодсистемы - Строка - Объект-владелец сохраняемого пароля или строка до 128 символов.
//  Данные  - Произвольный - Данные помещаемые в безопасное хранилище. Неопределенно - удаляет все данные.
//             Для удаления данных по ключу следует использовать процедуру УдалитьДанныеИзБезопасногоХранилища.
//  СобытиеЖурналаРегистрации  - Строка - Событие журнала регистрации.
//
// Возвращаемое значение:
//   Булево - Признак успешной записи.
//
Функция ЗаписатьДанныеВБезопасноеХранилище(ИдентификаторПодсистемы, Данные, СобытиеЖурналаРегистрации)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Данные = Неопределено Тогда
		
		// Удалить все данные из безопасного хранилища.
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(ИдентификаторПодсистемы);
		
		ТекстСообщения = НСтр("ru = 'Очищены данные.'");

		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Информация, , , ТекстСообщения);
		
	Иначе
		
		// Запись данных в безопасное хранилище
		
		ОбновитьПовторноИспользуемыеЗначения = Истина;
		
		НачатьТранзакцию();
		
		Попытка
			
			ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(ИдентификаторПодсистемы);
			
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ИдентификаторПодсистемы, Данные);
				
			ЗафиксироватьТранзакцию();

		Исключение
			
			ОтменитьТранзакцию();
			
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, , ,
				ПодробноеПредставлениеОшибки);
		
			ОбновитьПовторноИспользуемыеЗначения = Ложь;
		
			ВызватьИсключение;
			
		КонецПопытки;
		
		ТекстСообщения = НСтр("ru = 'Записаны данные.'");
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Информация, , , ТекстСообщения);
		
		Если ОбновитьПовторноИспользуемыеЗначения Тогда
		
			ОбновитьПовторноИспользуемыеЗначения();
		
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Возвращается имя события журнала регистрации для записи ошибок.
//
// Возвращаемое значение:
//	Строка - Имя события ошибки.
//
Функция СобытиеЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Интеграция с Yandex GPT'");
	
КонецФункции

#КонецОбласти